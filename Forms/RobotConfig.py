#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.12
# In conjunction with Tcl version 8.6
#    Mar 30, 2018 03:30:46 PM

import sys
import os
from tkinter import *
from tkinter import filedialog,messagebox

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True


class RobotConfig:

    recentDir=["."]
    botParams={}
    parent=None

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        self.botParams={}

    def show(self,params=None):

        self.botParams={}
        if params is not None:
            for key in params.keys():
                self.botParams[key]=params[key]
        else:
            print("RobotConfig.show() - no params")

        self.parent = Toplevel()
        self.parent.grab_set()  # make this dialog modal

        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#d9d9d9' # X11 color: 'gray85'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        self.parent.geometry("390x243")
        self.parent.title("Robot Config")
        self.parent.configure(background="#d9d9d9")
        self.parent.configure(highlightbackground="#d9d9d9")
        self.parent.configure(highlightcolor="black")

        self.Label1 = Label(self.parent)
        self.Label1.place(relx=0.0, rely=0.08, height=21, width=154)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Robot Name''')

        self.Name = Entry(self.parent)
        self.Name.place(relx=0.33, rely=0.08,height=20, relwidth=0.42)
        self.Name.configure(background="white")
        self.Name.configure(disabledforeground="#a3a3a3")
        self.Name.configure(font="TkFixedFont")
        self.Name.configure(foreground="#000000")
        self.Name.configure(highlightbackground="#d9d9d9")
        self.Name.configure(highlightcolor="black")
        self.Name.configure(insertbackground="black")
        self.Name.configure(selectbackground="#c4c4c4")
        self.Name.configure(selectforeground="black")

        self.Name.delete(0,END)
        self.Name.insert(END,self.botParams["name"])

        self.Label2 = Label(self.parent)
        self.Label2.place(relx=0.0, rely=0.25, height=21, width=124)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Color''')
        self.Label2.configure(width=124)

        self.okBtn = Button(self.parent)
        self.okBtn.place(relx=0.26, rely=0.78, height=24, width=46)
        self.okBtn.configure(activebackground="#d9d9d9")
        self.okBtn.configure(activeforeground="#000000")
        self.okBtn.configure(background="#d9d9d9")
        self.okBtn.configure(command=self._okButton)
        self.okBtn.configure(disabledforeground="#a3a3a3")
        self.okBtn.configure(foreground="#000000")
        self.okBtn.configure(highlightbackground="#d9d9d9")
        self.okBtn.configure(highlightcolor="black")
        self.okBtn.configure(pady="0")
        self.okBtn.configure(text='''Ok''')

        self.Label3 = Label(self.parent)
        self.Label3.place(relx=0.1, rely=0.53, height=21, width=63)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''Script Path''')

        self.Script = Entry(self.parent)
        self.Script.place(relx=0.33, rely=0.53, height=20, relwidth=0.42)
        self.Script.configure(background="white")
        self.Script.configure(disabledforeground="#a3a3a3")
        self.Script.configure(font="TkFixedFont")
        self.Script.configure(foreground="#000000")
        self.Script.configure(highlightbackground="#d9d9d9")
        self.Script.configure(highlightcolor="black")
        self.Script.configure(insertbackground="black")
        self.Script.configure(selectbackground="#c4c4c4")
        self.Script.configure(selectforeground="black")

        self.Script.delete(0,END)
        self.Script.insert(END,self.botParams["scriptPath"])

        self.ColorPicker = ScrolledListBox(self.parent)
        self.ColorPicker.place(relx=0.33, rely=0.25, relheight=0.23
                               , relwidth=0.26)
        self.ColorPicker.configure(background="white")
        self.ColorPicker.configure(disabledforeground="#a3a3a3")
        self.ColorPicker.configure(font="TkFixedFont")
        self.ColorPicker.configure(foreground="black")
        self.ColorPicker.configure(highlightbackground="#d9d9d9")
        self.ColorPicker.configure(highlightcolor="#d9d9d9")
        self.ColorPicker.configure(selectbackground="#c4c4c4")
        self.ColorPicker.configure(selectforeground="black")
        self.ColorPicker.configure(width=10)

        print("Robot params ",self.botParams)

        colorList= sorted(["Red","Black","White","Magenta","Cyan","Yellow","Green","Blue"])
        current=colorList.index(self.botParams["color"])

        for text in colorList:
            self.ColorPicker.insert(END,text)
        self.ColorPicker.selection_set(current)
        self.ColorPicker.see(current)

        self.chooseBtn = Button(self.parent)
        self.chooseBtn.place(relx=0.79, rely=0.53, height=24, width=51)
        self.chooseBtn.configure(activebackground="#d9d9d9")
        self.chooseBtn.configure(activeforeground="#000000")
        self.chooseBtn.configure(background="#d9d9d9")
        self.chooseBtn.configure(command=self._chooseButton)
        self.chooseBtn.configure(disabledforeground="#a3a3a3")
        self.chooseBtn.configure(foreground="#000000")
        self.chooseBtn.configure(highlightbackground="#d9d9d9")
        self.chooseBtn.configure(highlightcolor="black")
        self.chooseBtn.configure(pady="0")
        self.chooseBtn.configure(text='''Choose''')

        self.cancelBtn = Button(self.parent)
        self.cancelBtn.place(relx=0.59, rely=0.78, height=24, width=47)
        self.cancelBtn.configure(activebackground="#d9d9d9")
        self.cancelBtn.configure(activeforeground="#000000")
        self.cancelBtn.configure(background="#d9d9d9")
        self.cancelBtn.configure(command=self._cancelButton)
        self.cancelBtn.configure(disabledforeground="#a3a3a3")
        self.cancelBtn.configure(foreground="#000000")
        self.cancelBtn.configure(highlightbackground="#d9d9d9")
        self.cancelBtn.configure(highlightcolor="black")
        self.cancelBtn.configure(pady="0")
        self.cancelBtn.configure(text='''Cancel''')

        self.parent.wait_window()

    def _cancelButton(self):
        self.parent.destroy()

    def _okButton(self):
        self.botParams={}
        self.botParams["name"]=self.Name.get()
        self.botParams["scriptPath"]=self.Script.get()
        current=self.ColorPicker.curselection()
        if len(current)==0:
            messagebox.showinfo("Color Picker","You must select a color")
            return
        if len(current) >1:
            messagebox.showinfo("Color Picker", "Robots can only have one color.")
            return

        self.botParams["color"]=self.ColorPicker.get(current[0])
        self.parent.destroy()

    def _chooseButton(self):

        scriptName = filedialog.askopenfilename(initialdir=self.recentDir[0], title="Select file",
                                                filetypes=(("Script files", "*.dat"), ("all files", "*.*")))
        if scriptName:
            self.recentDir=os.path.split(scriptName)

            self.Script.delete(0,END)
            self.Script.insert(0,scriptName)


    def getParams(self):
        return self.botParams




# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, Listbox):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

if __name__ == '__main__':

    rc=RobotConfig(Tk())

    botParams={"name": "Brian", "color": "Blue", "scriptPath": "brian.dat"}

    rc.show(botParams)

    newparams=rc.getParams()

    print("Dialog returns",newparams)




