#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.12
# In conjunction with Tcl version 8.6
#    Apr 02, 2018 08:33:39 PM

import sys
import json
from tkinter import messagebox
from Forms import RobotConfig
import random
from Constants import *
try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True


class RobotManager:

    robotsPath="robot.json"     # location of robot json file
    parent=None
    botList={}                  # list of existing bots
    sim=None                    # the simulator - for adding bots
    arena=(0,0)                 # overwritten by passed in param
    size=30                     # diameter of robot
    console=None

    def __init__(self, **kwargs):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        # gather passed in variables
        for k,v in kwargs.items():
            setattr(self,k,v)

        if self.parent is None: self.parent=Toplevel()

        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#d9d9d9' # X11 color: 'gray85'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        self.parent.geometry("600x402")
        self.parent.title("Robot Manager")
        self.parent.configure(background="#d9d9d9")

        self.RobotList = ScrolledListBox(self.parent)
        self.RobotList.place(relx=0.2, rely=0.1, relheight=0.58, relwidth=0.62)
        self.RobotList.configure(background="white")
        self.RobotList.configure(disabledforeground="#a3a3a3")
        self.RobotList.configure(font="TkFixedFont")
        self.RobotList.configure(foreground="black")
        self.RobotList.configure(highlightbackground="#d9d9d9")
        self.RobotList.configure(highlightcolor="#d9d9d9")
        self.RobotList.configure(selectbackground="#c4c4c4")
        self.RobotList.configure(selectforeground="black")
        self.RobotList.configure(width=10)

        self.Label1 = Label(self.parent)
        self.Label1.place(relx=0.38, rely=0.02, height=21, width=94)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Robots Available''')

        self.NewBot = Button(self.parent)
        self.NewBot.place(relx=0.07, rely=0.82, height=24, width=35)
        self.NewBot.configure(activebackground="#d9d9d9")
        self.NewBot.configure(activeforeground="#000000")
        self.NewBot.configure(background="#d9d9d9")
        self.NewBot.configure(command=self.newRobot)
        self.NewBot.configure(disabledforeground="#a3a3a3")
        self.NewBot.configure(foreground="#000000")
        self.NewBot.configure(highlightbackground="#d9d9d9")
        self.NewBot.configure(highlightcolor="black")
        self.NewBot.configure(pady="0")
        self.NewBot.configure(text='''New''')

        self.DeleteBot = Button(self.parent)
        self.DeleteBot.place(relx=0.18, rely=0.82, height=24, width=44)
        self.DeleteBot.configure(activebackground="#d9d9d9")
        self.DeleteBot.configure(activeforeground="#000000")
        self.DeleteBot.configure(background="#d9d9d9")
        self.DeleteBot.configure(command=self.deleteRobots)
        self.DeleteBot.configure(disabledforeground="#a3a3a3")
        self.DeleteBot.configure(foreground="#000000")
        self.DeleteBot.configure(highlightbackground="#d9d9d9")
        self.DeleteBot.configure(highlightcolor="black")
        self.DeleteBot.configure(pady="0")
        self.DeleteBot.configure(text='''Delete''')

        self.SaveBots = Button(self.parent)
        self.SaveBots.place(relx=0.32, rely=0.82, height=24, width=35)
        self.SaveBots.configure(activebackground="#d9d9d9")
        self.SaveBots.configure(activeforeground="#000000")
        self.SaveBots.configure(background="#d9d9d9")
        self.SaveBots.configure(command=self.saveRobots)
        self.SaveBots.configure(disabledforeground="#a3a3a3")
        self.SaveBots.configure(foreground="#000000")
        self.SaveBots.configure(highlightbackground="#d9d9d9")
        self.SaveBots.configure(highlightcolor="black")
        self.SaveBots.configure(pady="0")
        self.SaveBots.configure(text='''Save''')

        self.ActivateBots = Button(self.parent)
        self.ActivateBots.place(relx=0.68, rely=0.82, height=24, width=54)
        self.ActivateBots.configure(activebackground="#d9d9d9")
        self.ActivateBots.configure(activeforeground="#000000")
        self.ActivateBots.configure(background="#d9d9d9")
        self.ActivateBots.configure(command=self.activateRobots)
        self.ActivateBots.configure(disabledforeground="#a3a3a3")
        self.ActivateBots.configure(foreground="#000000")
        self.ActivateBots.configure(highlightbackground="#d9d9d9")
        self.ActivateBots.configure(highlightcolor="black")
        self.ActivateBots.configure(pady="0")
        self.ActivateBots.configure(text='''Activate''')

        self.ConfigureBot = Button(self.parent)
        self.ConfigureBot.place(relx=0.42, rely=0.82, height=24, width=64)
        self.ConfigureBot.configure(activebackground="#d9d9d9")
        self.ConfigureBot.configure(activeforeground="#000000")
        self.ConfigureBot.configure(background="#d9d9d9")
        self.ConfigureBot.configure(command=self.configureRobot)
        self.ConfigureBot.configure(disabledforeground="#a3a3a3")
        self.ConfigureBot.configure(foreground="#000000")
        self.ConfigureBot.configure(highlightbackground="#d9d9d9")
        self.ConfigureBot.configure(highlightcolor="black")
        self.ConfigureBot.configure(pady="0")
        self.ConfigureBot.configure(text='''Configure''')

        self.parent.protocol("WM_DELETE_WINDOW", self.on_closing)
        self.loadRobots()


    def on_closing(self):
        messagebox.showinfo("Quit", "Please close the Script Manager window to terminate the program.")

    def loadRobots(self):
        if self.robotsPath is None:
            print("RobotManager.__init__() robotsPath is None")
            return

        try:
            f=open(self.robotsPath,"r")
            self.botList=json.load(f)
            f.close()

            self.refreshRobotList()
#            for bot in sorted(self.botList):
                # botList
 #               self.RobotList.insert(END, self.botList[bot]["name"])

        except Exception as e:
            print("Unable to load",self.robotsPath," .Has it been moved?",e.args)
            messagebox.showinfo("Robot Chooser","Unable to open robot data file "+self.robotsPath)


    def saveRobots(self):

        # backup current file
        f=open(self.robotsPath,"r")
        data=f.read()
        f.close()
        f=open(self.robotsPath+".bak","w")
        f.write(data)
        f.close()

        f = open(self.robotsPath, "w")
        json.dump(self.botList, f)
        f.close()

        messagebox.showinfo("Save","Robot definitions have been saved to "+self.robotsPath+" The original file was "
                                                                                           "backed up")

    def deleteRobots(self):
        selected = self.RobotList.curselection()
        if selected == ():
            messagebox.showinfo("Delete", "No robots selected.")
            return

        if not messagebox.askyesno("Delete","Please confirm,"+str(len(selected))+" robots will be deleted."):
            return

        for idx in selected:
            name=self.RobotList.get(idx)

            for bot in self.botList:
                # botList
                if self.botList[bot]["name"]==name:
                    self.botList[bot].delete()

        self.refreshRobotList()

        messagebox.showinfo("Delete",
                            "Robot definitions have been deleted. Use Save to make permanent.")

    def newRobot(self):
        botParams={}
        botParams["name"]=""
        botParams["color"]="Black"
        botParams["scriptPath"]=""

        rc = RobotConfig.RobotConfig()
        rc.show(botParams)
        config=rc.getParams()

        for bot in self.botList:
            # botList
            if self.botList[bot]["name"].upper() == config["name"].upper():
                messagebox.showinfo("New","Robot name is already taken "+str(config["name"]))
                return

        self.botList[config["name"]]=config

        self.RobotList.insert(END,config["name"])

        self.refreshRobotList()

    def refreshRobotList(self):
        botList=sorted(self.botList.keys(),key=str.lower)
        #print("RobotManager.refreshBotList() sorted=",botList)
        self.RobotList.delete(0,END)
        for bot in botList:
            self.RobotList.insert(END,bot)

    def configureRobot(self):
        selected = self.RobotList.curselection()
        if selected == ():
            messagebox.showinfo("Configure", "No robots selected.")
            return

        name=""

        for idx in selected:
            name=self.RobotList.get(idx)

            for bot in self.botList:
                # botList
                if self.botList[bot]["name"] == name:
                    rc = RobotConfig.RobotConfig()
                    rc.show(self.botList[bot])

                    config=rc.getParams()
                    self.botList[bot]=config

    def activateRobots(self):
        if self.sim is None:
            messagebox.showinfo("Activate", "Simulator not available")
            return

        selected = self.RobotList.curselection()
        if selected == ():
            messagebox.showinfo("Activate", "No robots selected.")
            return

        for idx in selected:
            name = self.RobotList.get(idx)

            for bot in self.botList:
                # botList
                if self.botList[bot]["name"] == name:
                    color=self.botList[bot]["color"]
                    scriptPath=self.botList[bot]["scriptPath"]

                    #messagebox.showinfo("Activate"," name:"+name+" color:"+color+" scriptPath:"+scriptPath)

                    # place the robot at the centre of the arena to start with
                    # script can use :-
                    # POS to reposition
                    # COMPASS or ANGLE or DIR to face the robot

                    w,h=self.arena

                    X = random.randint(0,w - 2*WALLMARGIN)+WALLMARGIN
                    Y = random.randint(0, h - 2 * WALLMARGIN) + WALLMARGIN
                    self.sim.addRobot(pos=(X, Y), arena=self.arena, size=self.size, name=name,
                                      direction=random.randint(0,360),
                                      scriptPath=scriptPath, color=color, speed=1)




# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, Listbox):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

if __name__ == '__main__':

    rm=RobotManager(parent=Tk(),robotsPath="..\\robot.json")


