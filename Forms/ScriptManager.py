#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.12
# In conjunction with Tcl version 8.6
#    Mar 31, 2018 06:00:40 PM
import time
t0=time.clock()
import sys,os
import tkinter.scrolledtext as tkscrolled
from tkinter import *
from tkinter import messagebox,filedialog #,Listbox,filedialog

from Forms import RobotChooser
from Forms import RobotManager

from Console import *
from Simulator import *
t1=time.clock()

print("Forms.ScriptManager imports took %.6fs"%(t1-t0))

class ScriptManager:

    robotList=None          # smartquadtree
    robotConfig=None        # robot.json file
    parent=None
    recentDir= ""           # last folder accessed
    scriptName=""           # last name of script loaded
    consoleSize=(600,150)
    console=None
    arena=(0,0)
    fps=50

    botCount=0
    dialogVisible=False

    def __init__(self, **kwargs):

        print("ScriptManager.__init__()")

        for k,v in kwargs.items():
            setattr(self,k,v)

        if self.parent is None: self.parent=Toplevel()

        self.parent.protocol("WM_DELETE_WINDOW", self.on_closing)

        if self.console is None:
            self.console = Console(consoleSize=self.consoleSize)

        self.sim = Simulator(root=self.parent, arena=self.arena, fps=self.fps, console=self.console)
        self.robotList=self.sim.getRobots()

        self.robotManager=RobotManager.RobotManager(robotConfig=self.robotConfig,sim=self.sim,arena=self.arena,
                                                    console=self.console)

        self.botCount=self.sim.getBotCount()
        self.dialogVisible=False
        self.show()

    def show(self):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#d9d9d9' # X11 color: 'gray85'

        self.parent.protocol("WM_DELETE_WINDOW", self.on_closing)

        self.parent.geometry("843x704")
        self.parent.title("Script Manager")
        self.parent.configure(background="#d9d9d9")


        self.script = tkscrolled.ScrolledText(master=self.parent, wrap="word")
        self.script.place(relx=0.02, rely=0.03, height=590, relwidth=0.94)
        self.script.configure(background="white")
        self.script.configure(font="TkFixedFont")
        self.script.configure(foreground="#000000")
        self.script.configure(insertbackground="black")
        self.script.configure(width=794)

        self.Button1 = Button(self.parent)
        self.Button1.place(relx=0.12, rely=0.92, height=34, width=47)
        self.Button1.configure(activebackground="#d9d9d9")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(command=self.openButton)
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Open''')
        self.Button1.configure(width=47)

        self.Button2 = Button(self.parent)
        self.Button2.place(relx=0.58, rely=0.92, height=34, width=117)
        self.Button2.configure(activebackground="#d9d9d9")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#d9d9d9")
        self.Button2.configure(command=self.sendToRobotsButton)
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Send To Robot(s)''')
        self.Button2.configure(width=117)

        self.Button3 = Button(self.parent)
        self.Button3.place(relx=0.2, rely=0.92, height=34, width=47)
        self.Button3.configure(activebackground="#d9d9d9")
        self.Button3.configure(activeforeground="#000000")
        self.Button3.configure(background="#d9d9d9")
        self.Button3.configure(command=self.saveButton)
        self.Button3.configure(disabledforeground="#a3a3a3")
        self.Button3.configure(foreground="#000000")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="black")
        self.Button3.configure(pady="0")
        self.Button3.configure(text='''Save''')
        self.Button3.configure(width=47)

        self.Button4 = Button(self.parent)
        self.Button4.place(relx=0.28, rely=0.92, height=34, width=57)
        self.Button4.configure(activebackground="#d9d9d9")
        self.Button4.configure(activeforeground="#000000")
        self.Button4.configure(background="#d9d9d9")
        self.Button4.configure(command=self.closeButton)
        self.Button4.configure(disabledforeground="#a3a3a3")
        self.Button4.configure(foreground="#000000")
        self.Button4.configure(highlightbackground="#d9d9d9")
        self.Button4.configure(highlightcolor="black")
        self.Button4.configure(pady="0")
        self.Button4.configure(text='''Close''')
        self.Button4.configure(width=57)


        self.ActiveBotsLabel = Label(self.parent)
        self.ActiveBotsLabel.place(relx=0.39, rely=0.88, height=21, width=65)
        self.ActiveBotsLabel.configure(background="#d9d9d9")
        self.ActiveBotsLabel.configure(disabledforeground="#a3a3a3")
        self.ActiveBotsLabel.configure(foreground="#000000")
        self.ActiveBotsLabel.configure(text='''Active Bots''')

        self.BotCount = Label(self.parent)
        self.BotCount.place(relx=0.47, rely=0.88, height=21, width=57)
        self.BotCount.configure(background="#d9d9d9")
        self.BotCount.configure(disabledforeground="#a3a3a3")
        self.BotCount.configure(foreground="#000000")
        self.BotCount.configure(text=str(self.botCount))

        self.dialogVisible=True

        while self.dialogVisible:
            self.update()
            try:
                # fails if the application is closed
                self.parent.update()
            except:
                break


        my_event = pygame.event.Event(QUIT)
        pygame.event.post(my_event)
        self.sim.stop()
        # give background threads chance to terminate gracefully
        time.sleep(2)

    def closeButton(self):
        self.on_closing()

    def openButton(self):

        try:
            # recent is a list <dir><filename>
            self.scriptName = filedialog.askopenfilename(initialdir=self.recentDir, title="Select file",
                                                         filetypes=(("Script files", "*.dat"), ("all files", "*.*")))
            if self.scriptName is not None:
                f = open(self.scriptName, "r")
                script = f.read()
                f.close()

                self.recentDir = os.path.split(self.scriptName)[0]

                text=self.script.get("1.0",END)
                if len(text)>0:
                    self.script.delete("1.0",END)
                self.script.insert(END, script)

        except Exception as e:
            self.script.insert(END, "Error reading script file. " + self.scriptName+" Error="+str(e.args))

    def saveButton(self):

        try:
            # recent is a list <dir><filename>
            self.scriptName = filedialog.asksaveasfilename(initialdir=self.recentDir, title="Select file",
                                                        filetypes=(("Script files", "*.dat"), ("all files", "*.*")))
            if self.scriptName is not None:
                self.recentDir = os.path.split(self.scriptName)

            lines=self.script.get("1.0",END).splitlines()

            f=open(self.scriptName,"w")
            for line in lines:
                f.write(line+"\n")
            f.close()

            messagebox.showinfo("Save As","File saved")

        except Exception as e:
            self.script.insert(END, "Error reading script file. " + self.scriptName+" Error="+str(e.args))

    def sendToRobotsButton(self):

        if self.sim.getBotCount()==0:
            messagebox.showinfo("Send","You must activate a robot first.")
            return

        lines = self.script.get("1.0", END).splitlines()
        if len(lines)==0:
            messagebox.showinfo("Send to bot","Please load a script first.")
            return

        if self.robotList is None:
            messagebox.showinfo("Send to bot", "ERROR: robotList is None")
            return

        # RobotChooser blocks till closed
        rc=RobotChooser.RobotChooser(self.parent, robotList=self.robotConfig)
        rc.show()

        for botName in rc.getList():

            for bot in self.robotList.elements():
                if bot.getName()==botName:
                    bot.replaceScript(lines)

    def on_closing(self):
        if messagebox.askyesno("Quit", "Are you sure you want to close this program?"):
            my_event = pygame.event.Event(QUIT)
            pygame.event.post(my_event)
            self.parent.destroy()
            self.dialogVisible=False

    def update(self):
        """
        Called from main at FPS times per second
        Update robots on PyGame display
        :return:
        """

        # GUI might not be ready
        self.botCount=self.sim.getBotCount()

        if self.dialogVisible:
            self.BotCount.configure(text=str(self.botCount))
        if self.sim is not None:
            self.sim.update()

if __name__ == '__main__':
    ARENA = (800, 800)
    CONSOLE = (600, 150)
    MANAGER = (600, 800)
    FPS = 50
    root=Tk()
    sm = ScriptManager(parent=None, size=MANAGER, arena=ARENA, consoleSize=CONSOLE, fps=FPS,
                       robotConfig="..//robot.json")
    sm.show()
    while True:
        sm.update()
        root.update()


